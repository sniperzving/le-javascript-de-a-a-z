/*
    1. Le mot cl√© delete.

    On peut supprimer une propri√©t√© d'un objet √† l'aide du mot cl√© delete.
*/

const city = {
  name: "Bratislava",
  population: 424000
}





/* Attention, utiliser delete avec la propri√©t√© d'un tableau va remplacer l'√©l√©ment supprim√© par un √©l√©ment empty */




/* 
    2. Bracket et dot notation.

    On peut s√©lectionner des propri√©t√©s en utilisant deux notations.
   
    A. Le point : obj.prop
    La dot notation, en utilisant directement le nom d'une propri√©t√©.
    La dot notation n'est pas disponible avec une cha√Æne de caract√®re ou un nombre, dans ce cas il faut utiliser la bracket notation.

    B. Les crochets [] : obj["prop"]
    C'est la bracket notation.
    Si vous utilisez un autre type qu'une cha√Æne entre les crochets, il sera converti en cha√Æne. obj[1] donnera obj["1"]

*/

const dog = {
  name: "Riki",
  legs: 4
}


/* 
    3. Form raccourcie des m√©thodes.

    On peut utiliser des fonctions classiques et les fonctions fl√©ch√©es dans les objets, voyons ensemble les diff√©rentes syntaxes.
*/




/* 
    4. Les tableaux sont des objets.

    Les tableaux sont des objets sp√©ciaux permettant de manipuler plusieurs valeurs facilement et contenant toute une flopp√©e de m√©thodes tr√®s pratiques.

    Chaque √©l√©ment est accessible par son index, nous sommes donc en pr√©sence d'une propri√©t√© - valeur. 

    // Cela ressemble beaucoup √† un objet n'est-ce pas ?
    [
      0: "üçì",
      1: "üçå",
      2: "üçá"
    ]

    Ils ont √©galement une propri√©t√© length.
    On acc√®de aux propri√©t√©s d'un tableau via la bracket notation, avec des nombres (les index).

*/

const fruits = ["üçì","üçå","üçá"]




/* 
    5. Les fonctions sont des objets.

    En JavaScript, on dit que les fonctions sont des first-class objets, car elles peuvent √™tre appel√©es, pass√©es √† d'autres fonctions(param√®tres-arguments), et quelles contiennent aussi des propri√©t√©s.
    Les fonctions sont des objets cr√©√©s √† partir du constructeur Function.

*/

